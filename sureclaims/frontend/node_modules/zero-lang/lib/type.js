'use strict';
const toString = {}.toString;
const isType = (obj, type) => toString.call(obj) === `[object ${type}]`;

const checkType = {
  isType,
  isArguments: obj => isType(obj, 'Arguments'),
  isArray: Array.isArray ? Array.isArray : obj => isType(obj, 'Array'),
  isArrayLike: obj => typeof obj === 'object' && isFinite(obj.length),
  isBoolean: obj => isType(obj, 'Boolean'),
  isDate: obj => isType(obj, 'Date'),
  isError: obj => isType(obj, 'Error'),
  isFunction: obj => isType(obj, 'Function'),
  isNull: obj => obj === null,
  isNumber: obj => isType(obj, 'Number'),
  isPlainObject: obj => isType(obj, 'Object'),
  isRegExp: obj => isType(obj, 'RegExp'),
  isString: obj => isType(obj, 'String'),
  isUndefined: obj => obj === undefined,
  getType(obj) {
    const typeStr = toString.call(obj);
    return typeStr.replace(/^\[object /, '').replace(/\]$/, '');
  },
  isObject(obj) {
    const type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  }
};

checkType.isNil = (obj) => checkType.isNull(obj) || checkType.isUndefined(obj);

module.exports = checkType;

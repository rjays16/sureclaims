const zeroLang = require('../lib');
const expect = chai.expect;

describe('zero-lang/number', () => {
  it('zeroLang.isDecimal', () => {
    expect(zeroLang.isDecimal(1)).to.equal(false);
    expect(zeroLang.isDecimal(1.1)).to.equal(true);
    expect(zeroLang.isDecimal('1')).to.equal(false);
  });
  it('zeroLang.isEven', () => { // 偶数
    expect(zeroLang.isEven(1)).to.equal(false);
    expect(zeroLang.isEven(20)).to.equal(true);
    expect(zeroLang.isEven(0)).to.equal(true);
    expect(zeroLang.isEven('1')).to.equal(false);
  });
  it('zeroLang.isOdd', () => { // 奇数
    expect(zeroLang.isOdd(1)).to.equal(true);
    expect(zeroLang.isOdd(20)).to.equal(false);
    expect(zeroLang.isOdd(0)).to.equal(false);
    expect(zeroLang.isOdd('1')).to.equal(false);
  });
  it('zeroLang.isInteger', () => {
    expect(zeroLang.isInteger(1)).to.equal(true);
    expect(zeroLang.isInteger(20.1)).to.equal(false);
    expect(zeroLang.isInteger(0.0)).to.equal(true);
    expect(zeroLang.isInteger('1')).to.equal(false);
  });
  it('zeroLang.isNegative', () => {
    expect(zeroLang.isNegative(1)).to.equal(false);
    expect(zeroLang.isNegative(-20.1)).to.equal(true);
    expect(zeroLang.isNegative(0.0)).to.equal(false);
    expect(zeroLang.isNegative('1')).to.equal(false);
  });
  it('zeroLang.isPositive', () => {
    expect(zeroLang.isPositive(1)).to.equal(true);
    expect(zeroLang.isPositive(-20.1)).to.equal(false);
    expect(zeroLang.isPositive(0.0)).to.equal(false);
    expect(zeroLang.isPositive('1')).to.equal(false);
  });
  it('zeroLang.isNumber', () => {
    expect(zeroLang.isNumber(NaN)).to.equal(true);
    expect(zeroLang.isNumber(1)).to.equal(true);
    expect(zeroLang.isNumber('1')).to.equal(false);
  });
  it('zeroLang.isInRange', () => {
    const falsey = [undefined, '', 0, false, NaN, null, undefined];
    expect(zeroLang.isInRange(3, 5)).to.equal(true);
    expect(zeroLang.isInRange(5, 5)).to.equal(false);
    expect(zeroLang.isInRange(6, 5)).to.equal(false);
    expect(zeroLang.isInRange(5.2, 5)).to.equal(false);
    expect(zeroLang.isInRange(0.5, 5)).to.equal(true);
    expect(zeroLang.isInRange(1, 1, 5)).to.equal(true);
    expect(zeroLang.isInRange(3, 1, 5)).to.equal(true);
    expect(zeroLang.isInRange(0, 1, 5)).to.equal(false);
    expect(zeroLang.isInRange(5, 1, 5)).to.equal(false);
    expect(zeroLang.isInRange(1.2, 1, 5)).to.equal(true);
    expect(zeroLang.isInRange(0.5, 1, 5)).to.equal(false);
    expect(zeroLang.isInRange(2, 5, 1)).to.equal(true);
    expect(zeroLang.isInRange(-3, -2, -6)).to.equal(true);
    zeroLang.each(falsey, (value, index) => {
      if (index) {
        expect(zeroLang.isInRange(0, value)).to.equal(false);
        expect(zeroLang.isInRange(0, value, 1)).to.equal(true);
      } else {
        expect(zeroLang.isInRange(0)).to.equal(false);
      }
    });
  });
});

const zeroLang = require('../lib');
const expect = chai.expect;

describe('zero-lang/array', () => {
  const indexOf = zeroLang.index(true);
  const lastIndexOf = zeroLang.index(false);
  let arrA;
  let arrB;

  beforeEach(() => {
    arrA = [1, 2, 3, 3, 4, 4, 4, 5];
    arrB = [];
  });

  it('zeroLang.indexOf(arr, searchElement, fromIndex)', () => {
    expect(indexOf(arrA, 1)).to.equal(0);
    expect(indexOf(arrA, 4)).to.equal(4);
    expect(indexOf(arrA, 5)).to.equal(7);
    expect(indexOf(arrA, 6)).to.equal(-1);
  });

  it('zeroLang.lastIndexOf(arr, searchElement, fromIndex)', () => {
    expect(lastIndexOf(arrA, 5)).to.equal(7);
    expect(lastIndexOf(arrA, 3)).to.equal(3);
    expect(lastIndexOf(arrA, 2)).to.equal(1);
    expect(lastIndexOf(arrA, 6)).to.equal(-1);
  });
  it('zeroLang.forEach(obj, callback, thisObj)', () => {
    zeroLang.forEach(arrA, (a) => {
      a += 0;
      arrB.push(a);
    });
    expect(arrB).to.deep.equal([1, 2, 3, 3, 4, 4, 4, 5]);
    arrB = [];
    zeroLang.forEach(arrA, (a) => {
      a += 1;
      arrB.push(a);
    });
    expect(arrB).to.deep.equal([2, 3, 4, 4, 5, 5, 5, 6]);
  });
  it('zeroLang.every(obj, callback, thisObj)', () => { // alias
    expect(zeroLang.every(arrA, (item) => item === 4)).to.equal(false);
  });
  it('zeroLang.some(obj, callback, thisObj)', () => { // alias
    expect(zeroLang.some(arrA, (item) => item === 4)).to.equal(true);
  });
  it('zeroLang.each(obj, callback, thisObj)', () => { // alias
    zeroLang.each(arrA, (a) => {
      a += 0;
      arrB.push(a);
    });
    expect(arrB).to.deep.equal([1, 2, 3, 3, 4, 4, 4, 5]);
    arrB = [];
    zeroLang.each(arrA, (a) => {
      a += 1;
      arrB.push(a);
    });
    expect(arrB).to.deep.equal([2, 3, 4, 4, 5, 5, 5, 6]);
  });
  it('zeroLang.remove(arr, fromIndex, toIndex)', () => {
    zeroLang.remove(arrA, 0, 2);
    expect(arrA).to.deep.equal([3, 4, 4, 4, 5]);
    zeroLang.remove(arrA, 0);
    expect(arrA).to.deep.equal([4, 4, 4, 5]);
    zeroLang.remove(arrA, 0, -1);
    expect(arrA).to.deep.equal([]);
  });
  it('CANNOT use zeroLang.remove() inside of zeroLang.each() callback to THE SAME ARRAY', () => {
    zeroLang.each(arrA, (num, i) => {
      if (num === 4) {
        zeroLang.remove(arrA, i);
      }
    });
    expect(arrA).not.to.deep.equal([1, 2, 3, 3, 5]);
    expect(arrA).not.to.deep.equal([1, 2, 3, 3, 4, 4, 4, 5]);
    expect(arrA).to.deep.equal([1, 2, 3, 3, 4, 5]); // !!!!!!!!!! REMEMBER THIS !!!!!!!!!!
  });
});

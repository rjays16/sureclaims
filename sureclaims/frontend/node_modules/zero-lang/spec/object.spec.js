const zeroLang = require('../lib');
const expect = chai.expect;

describe('zero-lang/object', () => {
  const obj = {
    foo: 'bar',
    hoo: 'goo'
  };
  it('delete in zeroLang.forIn()', () => {
    zeroLang.forIn(obj, (value, key) => {
      if (value === 'bar') {
        delete obj[key];
      }
    });
    expect(obj).to.deep.equal({ // !!!!!!!!!! REMEMBER THIS !!!!!!!!!!
      hoo: 'goo'
    });
  });

  const destObj1 = {};
  const destObj2 = {};
  const obj1 = {
    hello: 'world'
  };
  const obj2 = {
    foo: 'bar',
    bar: {
      hi: 'hello',
      woo: 'weee',
      wee: {
        hoo: 'gee',
        hi: 'hi'
      }
    }
  };
  const obj3 = {
    foo: 'too',
    bar: {
      woo: 'waaa',
      wee: {
        hi: 'hoo'
      }
    },
    hello: [
      'world',
      'html',
      'object'
    ]
  };
  zeroLang.merge(destObj1, obj1, obj2, obj3);
  it('zeroLang.merge(dest)', () => { // 深度合并
    // expect(destObj1.hello).to.equal('world');
    expect(destObj1.foo).to.equal('too');
    expect(destObj1.bar.woo).to.equal('waaa');
    expect(destObj1.bar.hi).to.equal('hello');
    expect(destObj1.bar.wee.hoo).to.equal('gee');
    expect(destObj1.bar.wee.hi).to.equal('hoo');
    expect(destObj1.hello).to.deep.equal(['world', 'html', 'object']);
    expect(Object.prototype.toString.call(destObj1.hello)).to.equal('[object Array]');
  });
  zeroLang.extend(destObj2, obj1, obj2, obj3);
  it('zeroLang.extend(dest)', () => { // 扩展
    expect(destObj1.hello).to.deep.equal(['world', 'html', 'object']);
    expect(destObj2.foo).to.equal('too');
    expect(destObj2.bar.woo).to.equal('waaa');
    expect(destObj2.bar.hi).to.equal(undefined);
    expect(destObj2.bar.wee.hoo).to.equal(undefined);
    expect(destObj2.bar.wee.hi).to.equal('hoo');
  });

  it('zeroLang.clone(dest)', () => {
    expect(zeroLang.clone(obj2).bar).not.to.equal(obj2.bar);
    expect(zeroLang.clone(obj2).bar).to.deep.equal(obj2.bar);
  });

  it('zeroLang.hasKey(obj, key)', () => {
    expect(() => zeroLang.hasKey(Object.create(null), 'some')).to.not.throw(Error);
  });

  it('zeroLang.invert(obj)', () => {
    expect(zeroLang.invert(obj2.bar.wee)).to.deep.equal({
      gee: 'hoo',
      hi: 'hi'
    });
  });
});
